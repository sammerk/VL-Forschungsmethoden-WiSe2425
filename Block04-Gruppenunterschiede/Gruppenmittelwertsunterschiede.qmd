---
title: "Effektstärken" 
subtitle: "für Gruppenmittelwertsunterschiede"
author: "Samuel Merk"
format: 
  revealjs:
    auto-stretch: false
    controls: true
    slide-number: false
    logo: img/PHlogo.svg
    theme: [dark, css/custom.scss]
    fullscreen: true
    pdfexport: true
bibliography: references.bib
csl: apa.csl
editor_options: 
  chunk_output_type: console
---

## Inhalte dieses Erklärvideos {.center .smaller}

```{r hidden chunk which creates template stuff}
#| echo: false

## in terminal ########
# quarto install extension quarto-ext/fontawesome
# quarto install extension schochastics/academicons
#

########################
library(fontawesome)
library(tidyverse)
set.seed(848265)

# Change css to lecker PH green
if(!dir.exists("img"))
dir.create("img")
if(!dir.exists("css"))
dir.create("css")
fileConn<-file("css/custom.scss")
writeLines(c("/*-- scss:defaults --*/",
             "$link-color: #8cd000 !default;",
             ".imp {color: #8cd000;}",
             ".em15 {font-size:1.5em;}",
             ".c {text-align: right !important;}",
             ".callout-title {background-color: #8cd000 !important;}",
             "#vcenter {vertical-align: middle;}"),
           fileConn)
close(fileConn)
```

. . .

[{{< fa lightbulb >}}]{.imp} Informationsgehalt von Effektstärken

. . .  

[{{< fa ruler >}}]{.imp} Effektstärken für zwei normalverteilte Variablen (Cohen's $U_1$, $U_3$ und $d$)

. . .

[{{< fa medal >}}]{.imp} Effektstärken für zwei nicht-normalverteilte (z.B. ordinale) Variablen (Cliff's $d$)


## <!--Informationsgehalt von Effektstärken--> {.center .smaller}
[{{< fa lightbulb >}} Informationsgehalt von Effektstärken]{.em15 .c .imp}


## Informationsgehalt von Effektstärken {.center .smaller}
::: {.r-stack}
![](img/spiegel_wortschatz.png){.fragment fragment-index=1 width="80%" fig-align="center"}

![](img/FAZ_Migrationshintergrund.png){.fragment fragment-index=2 width="68%" fig-align="center"}

![](img/ImaginaryPill.png){.fragment fragment-index=3 width="33%" fig-align="center"}

![](img/welt_problemlösen.png){.fragment fragment-index=4 width="60%" fig-align="center"}
:::

. . .

<center>Artikel aus Spiegel [-@2022a], FAZ [-@2018a], psychologie-lernen.de [-@psychologie-lernen.de2023] und Welt [-@2015a]</center>

## Informationsgehalt von Effektstärken {.center .smaller}
![](img/visOverlap.svg){width=70% fig-align="center"}  

<center>
Zum Informationsgehalt von Mittelwertsdifferenzen.
</center>

## <!--ShinyApp--> {.center}
<iframe id="Uberlappung" src="https://sammerk.shinyapps.io/ShinyApp_Overlap" allowfullscreen="" mozallowfullscreen="" webkitallowfullscreen="" id="iframe_container" frameborder="0" ></iframe>
</center>
<style>
#Uberlappung {height: 670px; width: 1000px; margin-top: 0.0cm; border:0px;}
</style>

## <!--Effektstärken für zwei normalverteilte (z.B. ordinale) Variablen--> {.center}
[{{< fa ruler >}} Effektstärken für zwei normalverteilte Variablen]{style="color:#8cd000; font-size:1.2em;"}

## Cohen's U₁ (% of Non-Overlap){.center .smaller}

```{r}
#| fig-width: 13
#| fig-height: 3.5
#| fig-format: svg
#| cache: true

library(tidyverse)
library(patchwork)
library(hrbrthemes)
plot1 <-
  ggplot(data.frame(x = c(-3, 3.8)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .8),
    color = "#8cd000"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    args = list(mean = .8),
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  xlim(c(-3, 3.8)) +
  ggtitle("Großer Effekt", bquote("Cohen's" ~U[1]~ "= % of Non-Overlap = .47")) +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())

plot2 <-
  ggplot(data.frame(x = c(-3, 3.5)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .5),
    color = "#8cd000"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    args = list(mean = .5),
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  xlim(c(-3, 3.5)) +
  ggtitle("Moderater Effekt", bquote("Cohen's" ~U[1]~ "= % of Non-Overlap = .33")) +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())


plot3 <-
  ggplot(data.frame(x = c(-3, 3.2)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .2),
    color = "#8cd000"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    args = list(mean = .2),
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  xlim(c(-3, 3.2)) +
  ggtitle("Kleiner Effekt", bquote("Cohen's" ~U[1]~ "= % of Non-Overlap = .15")) +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())


plot1 + plot2 + plot3 +
  plot_layout() &
   theme(plot.background = element_rect(fill = "#1e1e1e",
                                        color = "#1e1e1e")) # 1e1e1e from hrbr
```

::: {.incremental}
* $U_1 =$ Nicht-Überlappung der Häufigkeitsverteilungen
* Voraussetzung: Zwei normalverteile (daher auch intervallskalierte) Variablen
* $U_1$ nimmt Werte zwischen 0 (Nulleffekt) und 1 (maximaler Effekt) an
* Cohen's [-@cohen1988] Benchmarks für kleine, mittlere und große Effekte liegen bei $U_1=.15$, $U_1=.33$ und $U_1=.47$
:::



## Cohen's U₃ (% Over Other Mean){.center .smaller} 

```{r}
#| fig-width: 13
#| fig-height: 3.5
#| fig-format: svg
#| cache: true

library(tidyverse)
library(patchwork)
library(hrbrthemes)
plot1 <-
  ggplot(data.frame(x = c(-3, 3.8)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .8),
    color = "#8cd000"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    args = list(mean = .8),
    xlim = c(0, 3.8),
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  xlim(c(-3, 3.7)) +
  ggtitle("Großer Effekt", bquote("Cohen's" ~U[3]~ "= % Over Other Mean = .79")) +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())

plot2 <-
  ggplot(data.frame(x = c(-3, 3.5)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .5),
    color = "#8cd000"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    args = list(mean = .5),
    xlim = c(0, 3.5),
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  xlim(c(-3, 3.5)) +
  ggtitle("Moderater Effekt", bquote("Cohen's" ~U[3]~ "= % Over Other Mean = .69")) +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())


plot3 <-
  ggplot(data.frame(x = c(-3, 3.2)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .2),
    color = "#8cd000"
  ) +
  stat_function(
    geom = "area", 
    fun = dnorm,
    xlim = c(0, 3.2),
    args = list(mean = .2),
    fill = "#8cd00050",
    color="#ffffff00"
  ) +
  xlim(c(-3, 3.2)) +
  ggtitle("Kleiner Effekt", bquote("Cohen's" ~U[3]~ "= % Over Other Mean = .54")) +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())


plot1 + plot2 + plot3 +
  plot_layout() &
   theme(plot.background = element_rect(fill = "#1e1e1e",
                                        color = "#1e1e1e")) # 1e1e1e from hrbr
```

::: {.incremental}
* $U_3 =$ % über dem Mittelwert der anderen Gruppe
* Voraussetzung: Zwei normalverteile (daher auch intervallskalierte) Variablen
* $U_3$ nimmt Werte zwischen 0 (maximale Unterlegenheit) und 1 (maximale Überlegenheit) an; ein Nulleffekt liegt bei $U_3 = 0.5$ vor
* Cohen's Benchmarks für kleine, mittlere und große Effekte liegen bei $U_3=.58$, $U_3=.69$ und $U_3=.79$
:::


## [Cohen's $d$ (Standardized Mean Difference)]{style="font-size:.8em;"}{.center .smaller}

```{r}
#| cache: true
#| fig-width: 13
#| fig-height: 3.5
#| fig-format: svg

library(tidyverse)
library(patchwork)
library(hrbrthemes)
plot1 <-
  ggplot(data.frame(x = c(-3, 3.8)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .8),
    color = "#8cd000"
  ) +
  # mean gr 1
  geom_segment(aes(
    x = 0,
    y = 0,
    xend = 0,
    yend = dnorm(0)),
    color = "#8cd00030"
  ) +
  # mean gr 2
  geom_segment(aes(
    x = 0.8,
    y = 0,
    xend = 0.8,
    yend = dnorm(0)),
    color = "#8cd00030"
  ) +
  # mean diff
  geom_segment(aes(
    y = .05,
    x = 0,
    yend = .05,
    xend = .8),
    color = "#8cd000",
    linetype = "dotted"
  ) +
  # sd
  geom_segment(aes(
    y = dnorm(1),
    x = .8,
    yend = dnorm(1),
    xend = 1.8),
    color = "#8cd000",
    linetype = "dashed"
  ) +
  xlim(c(-3, 3.7)) +
  ggtitle("Großer Effekt", "Cohen's d = Standardized Mean Difference = .8") +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())

plot2 <-
  ggplot(data.frame(x = c(-3, 3.5)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .5),
    color = "#8cd000"
  ) +
   # mean gr 1
  geom_segment(aes(
    x = 0,
    y = 0,
    xend = 0,
    yend = dnorm(0)),
    color = "#8cd00030"
  ) +
  # mean gr 2
  geom_segment(aes(
    x = 0.5,
    y = 0,
    xend = 0.5,
    yend = dnorm(0)),
    color = "#8cd00030"
  ) +
  # mean diff
  geom_segment(aes(
    y = .05,
    x = 0,
    yend = .05,
    xend = .5),
    color = "#8cd000",
    linetype = "dotted"
  ) +
  # sd
  geom_segment(aes(
    y = dnorm(1),
    x = .5,
    yend = dnorm(1),
    xend = 1.5),
    color = "#8cd000",
    linetype = "dashed"
  ) +
  xlim(c(-3, 3.5)) +
  ggtitle("Moderater Effekt", "Cohen's d = Standardized Mean Difference = .5") +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())


plot3 <-
  ggplot(data.frame(x = c(-3, 3.2)), aes(x)) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    color = "#8cd000"
  ) +
  stat_function(
    geom = "line", 
    fun = dnorm,
    args = list(mean = .2),
    color = "#8cd000"
  ) +
   # mean gr 1
  geom_segment(aes(
    x = 0,
    y = 0,
    xend = 0,
    yend = dnorm(0)),
    color = "#8cd00030"
  ) +
  # mean gr 2
  geom_segment(aes(
    x = 0.2,
    y = 0,
    xend = 0.2,
    yend = dnorm(0)),
    color = "#8cd00030"
  ) +
  # mean diff
  geom_segment(aes(
    y = .05,
    x = 0,
    yend = .05,
    xend = .2),
    color = "#8cd000",
    linetype = "dotted"
  ) +
  # sd
  geom_segment(aes(
    y = dnorm(1),
    x = .2,
    yend = dnorm(1),
    xend = 1.2),
    color = "#8cd000",
    linetype = "dashed"
  ) +
  xlim(c(-3, 3.2)) +
  ggtitle("Kleiner Effekt", "Cohen's d = Standardized Mean Difference = .2") +
  theme_modern_rc() +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_blank())


plot1 + plot2 + plot3 +
  plot_layout() &
   theme(plot.background = element_rect(fill = "#1e1e1e",
                                        color = "#1e1e1e")) # 1e1e1e from hrbr
```

::: {.incremental}
* $d(XY) = \frac{\bar{x}-\bar{y}}{\sqrt{\frac{s_x^2 + s_y^2}{2}}}$ [(Interaktive Visualisierung {{< fa square-up-right >}})](https://www.geogebra.org/m/tGcX62gq){preview-link="true"}
* Cohen's $d$ kann Werte zwischen $-\infty$ und $+\infty$ annehmen. Je weiter $d$ von 0 entfernt ist, desto stärker ist der Effekt; $d = 0$ entspricht dem Nulleffekt 
* Cohen's Benchmarks für kleine, mittlere und große Effekte liegen bei $d=.2$, $d=.5$ und $d=.8$
:::

## Visual Guessing U₁, U₃, & Cohen's d {.center}
<iframe id="guessingd" src="https://sammerk.shinyapps.io/Visual_Guessing_d_U3_U1" allowfullscreen="" mozallowfullscreen="" webkitallowfullscreen="" id="iframe_container" frameborder="0" ></iframe>
</center>
<style>
#guessingd {height: 500px; width: 900px; margin-top: 0.0cm; border:0px;}
</style>




## <!--Effektstärken für zwei nicht-normalverteilte (z.B. ordinale) Variablen--> {.center}
[{{< fa medal >}} Effektstärken für zwei nicht-normalverteilte (z.B. ordinale) Variablen]{style="color:#8cd000; font-size:.87em;"}



## Cliff's $d$ (Rangbiseriale Korrelation) {.smaller .center}
:::: {.columns}

::: {.column #vcenter width='50%'}

Die Grundidee von Cliff's d ist, jeden Punkt einer Gruppe $x_i$ mit jedem Punkt der anderen Gruppe $y_i$ zu vergleichen und zu entscheiden, ob $\color{#d77d00}{x_i < y_i}$, $x_i = y_i$ oder $\color{#8cd000}{x_i > y_i}$ gilt.

:::

::: {.column width='50%'}
```{r}
#| fig-width: 3
#| fig-height: 4
#| out-width: 80%
#| fig-align: center
library(hrbrthemes)

tibble(Placebo = c(1, 2, 2, 3) + 1,
         Control = c(3, 4, 4, 5)) |>
  gather(Gruppe, Nervosität) |>
  ggplot(aes(x = Gruppe, Nervosität)) +
  geom_dotplot(
    color = "#ffffff",
    fill = "#ffffff",
    binaxis = "y",
    stackdir = "center"
  ) +
  geom_segment(aes(
    x = 1,
    y = 3,
    xend = 2,
    yend = 4
  ), color = "#d77d0050") +
  geom_segment(aes(
    x = 1,
    y = 3,
    xend = 2,
    yend = 2
  ), color = "#8cd00050") +
  geom_dotplot(
    color = "#ffffff",
    fill = "#ffffff",
    binaxis = "y",
    stackdir = "center"
  ) +
  ggtitle("Illustration Cliff's d") +
  theme_modern_rc()


```

:::

::::

## Cliff's $d$ (Rangbiseriale Korrelation) {.smaller .center }

:::: {.columns}

::: {.column width='70%'}
::: {.fragment}
$$\text{Cliff's } d = \frac{\#\text{Abwärtsvergl.} - \#\text{Aufwärtsvergl.}}{\#\text{Alle Vergl.}}$$

$$= \frac{\color{#8cd000}{\#(x_i > y_i)} - \color{#d77d00}{\#(x_i < y_i)}}{\#X \cdot \#Y}$$

$$= \frac{\color{#8cd000}{11} - \color{#d77d00}{1}}{16}$$
$$= .625$$ 

:::
:::

::: {.column width='30%'}

```{r}
#| fig-width: 3
#| fig-height: 4
#| out-width: 99%
#| fig-align: center
library(hrbrthemes)

tibble(Placebo = c(1, 2, 2, 3) + 1,
         Control = c(3, 4, 4, 5)) |>
  gather(Gruppe, Nervosität) |>
  ggplot(aes(x = Gruppe, Nervosität)) +
  geom_dotplot(
    color = "#ffffff",
    fill = "#ffffff",
    binaxis = "y",
    stackdir = "center"
  ) +
  geom_segment(aes(
    x = 1,
    y = 3,
    xend = 2,
    yend = 4
  ), color = "#d77d0050") +
  geom_segment(aes(
    x = 1,
    y = 3,
    xend = 2,
    yend = 2
  ), color = "#8cd00050") +
  geom_segment(aes(
    x = 1.05,
    y = 4,
    xend = 2,
    yend = 2
  ), color = "#8cd00050") +
    geom_segment(aes(
    x = .95,
    y = 4,
    xend = 2,
    yend = 2
  ), color = "#8cd00050") +
  geom_segment(aes(
    x = 1.05,
    y = 4,
    xend = 1.95,
    yend = 3
  ), color = "#8cd00050") +
    geom_segment(aes(
    x = .95,
    y = 4,
    xend = 1.95,
    yend = 3
  ), color = "#8cd00050") +
  geom_segment(aes(
    x = 1.05,
    y = 4,
    xend = 2.05,
    yend = 3
  ), color = "#8cd00050") +
    geom_segment(aes(
    x = .95,
    y = 4,
    xend = 2.05,
    yend = 3
  ), color = "#8cd00050") +
  geom_segment(aes(
    x = 1,
    y = 5,
    xend = 2,
    yend = 4
  ), color = "#8cd00050") +
  geom_segment(aes(
    x = 1,
    y = 5,
    xend = 1.95,
    yend = 3
  ), color = "#8cd00050") +
    geom_segment(aes(
    x = 1,
    y = 5,
    xend = 2.05,
    yend = 3
  ), color = "#8cd00050") +
    geom_segment(aes(
    x = 1,
    y = 5,
    xend = 2,
    yend = 2
  ), color = "#8cd00050") +
  geom_dotplot(
    color = "#ffffff",
    fill = "#ffffff",
    binaxis = "y",
    stackdir = "center"
  ) +
  ggtitle("Illustration Cliff's d") +
  theme_modern_rc()


```

:::

::::

## Benchmarks Cliff's d {.smaller}
```{r}
#| label: vis_cliff_function
#| fig-width: 13
#| fig-height: 4.5
#| fig-format: svg

library(bayestestR)
library(patchwork)
vis_cliff <- function(plot_raw, rnd, alpha, color) {
data_rawplot <- 
  layer_data(plot_raw)

data_expanded <- 
  expand_grid(ylinks = data_rawplot |> filter(round(x, 0) == 1) |> pull(y),
              yrechts = data_rawplot |> filter(round(x, 0) == 2) |> pull(y)) |> 
  gather(ort_y, y) |> 
  left_join(data_rawplot |> dplyr::select(y, x))

data_to_add <- 
  tibble(ylinks = data_expanded |> filter(ort_y == "ylinks") |> pull(y),
         xlinks = data_expanded |> filter(ort_y == "ylinks") |> pull(x),
         yrechts = data_expanded |> filter(ort_y == "yrechts") |> pull(y),
         xrechts = data_expanded |> filter(ort_y == "yrechts") |> pull(x)) |> 
  mutate(Vergleich = ifelse(round(ylinks, rnd) < round(yrechts, rnd), "aufwärts", 
                            ifelse(round(ylinks, rnd) > round(yrechts, rnd), "abwärts", "gleich"))) |> 
  # order rows randomly
  sample_frac(1)
ggplot() +
  geom_segment(
    data = data_to_add,
    aes(
      x = xlinks,
      y = ylinks,
      xend = xrechts,
      yend = yrechts,
      color = Vergleich
    ),
    alpha = alpha
  ) +
  geom_point(data = data_rawplot, aes(x,y),
             color = color) +
  theme_modern_rc() +
  scale_color_manual(values = c("#8cd000", "#d77d00", "#ffffff"),
                     guide = guide_legend(override.aes = list(size = 3,
                                                                    alpha = 1))
                     )

}


set.seed(2505)
data1 <- 
  tibble(Control = c(1:5, 
                     round(distribution_beta(22, 3.21, 2)/2, digits = 1)*10),
         Placebo = c(1:5, 
                     round(distribution_beta(22, 2, 3.21)/2, digits = 1)*10)) |> 
           gather(Bedingung, Nervosität)

plot1 <- 
  ggplot(data1,
         aes(Bedingung, Nervosität)) +
  geom_jitter(color = "#8cd000",
              width = .08,
              height = .2)
plot1 <- 
  vis_cliff(plot1, 0, .1, "#ffffff")   +
  ggtitle("Großer Effekt", 
          "Cliff's d = Rangbiseriale Korrelation = .43") +
    ylab("Nervosität") +
    xlab("Bedingung") +
    scale_x_continuous(breaks = c(1,2),
                       label = c("Control","Placebo"),
                       limits = c(.75, 2.25)) +
    ylim(c(.5,5.5)) +
    theme(panel.grid.minor = element_blank(),
          plot.margin = margin(.2, .2, .2, .2, "cm"))
  


data2 <- 
  tibble(Control = c(1:5, 
                     round(distribution_beta(22, 2.6, 2)/2, digits = 1)*10),
         Placebo = c(1:5, 
                     round(distribution_beta(22, 2, 2.6)/2, digits = 1)*10)) |> 
           gather(Bedingung, Nervosität)

plot2 <- 
  ggplot(data2,
         aes(Bedingung, Nervosität)) +
  geom_jitter(color = "#8cd000",
              width = .08,
              height = .2)
plot2 <- 
  vis_cliff(plot2, 0, .1, "#ffffff")   +
  ggtitle("Moderater Effekt", 
          "Cliff's d = Rangbiseriale Korrelation = .28") +
    ylab("Nervosität") +
    xlab("Bedingung") +
    scale_x_continuous(breaks = c(1,2),
                       label = c("Control","Placebo"),
                       limits = c(.75, 2.25)) +
    ylim(c(.5,5.5)) +
    theme(panel.grid.minor = element_blank(),
          plot.margin = margin(.2, .2, .2, .2, "cm"))


data3 <- 
  tibble(Control = c(1:5, 
                     round(distribution_beta(22, 2.3, 2)/2, digits = 1)*10),
         Placebo = c(1:5, 
                     round(distribution_beta(22, 2, 2.3)/2, digits = 1)*10)) |> 
           gather(Bedingung, Nervosität)

plot3 <- 
  ggplot(data3,
         aes(Bedingung, Nervosität)) +
  geom_jitter(color = "#8cd000",
              width = .08,
              height = .2)
plot3 <- 
  vis_cliff(plot3, 0, .1, "#ffffff")   +
  ggtitle("Kleiner Effekt", 
          "Cliff's d = Rangbiseriale Korrelation = .11") +
    ylab("Nervosität") +
    xlab("Bedingung") +
    scale_x_continuous(breaks = c(1,2),
                       label = c("Control","Placebo"),
                       limits = c(.75, 2.25)) +
    ylim(c(.5,5.5)) +
    theme(panel.grid.minor = element_blank(),
          plot.margin = margin(.2, .2, .2, .2, "cm"))


plot1 + plot2 + plot3 +
  plot_layout() &
  theme(plot.background =
          element_rect(fill = "#1e1e1e",
                       color = "#1e1e1e")) # 1e1e1e from hrbr
  
```

::: {.incremental}
* Voraussetzung: Zwei mindestens ordinalverteile Variablen
* Cliff's $d(X, Y)$ nimmt Werte zwischen -1 (maximale Unterlegenheit von X) und 1 (maximale Überlegenheit von X) an; ein Nulleffekt liegt bei $d = 0$ vor
* Cohen's Benchmarks für kleine, mittlere und große Effekte liegen bei $d=.11$, $d=.28$ und $d=.43$
:::


## Benchmarks Übersicht {.center}
```{r}
tibble(Effektstärke = c("U₁", "U₃", "Cohen's d", "Cliff's d"),
       `klein` = c(.14, .58, .2, .11),
       `moderat` = c(.33, .69, .5, .28),
       `groß` = c(.47, .78, .8, .43)) |> 
  knitr::kable()
```


## Visual Guessing Cliff's d {.center}
<iframe id="guessingCliffsd" src="https://sammerk.shinyapps.io/Visual_Guessing_Cliffs_d" allowfullscreen="" mozallowfullscreen="" webkitallowfullscreen="" id="iframe_container" frameborder="0" ></iframe>
</center>
<style>
#guessingCliffsd {height: 500px; width: 900px; margin-top: 0.0cm; border:0px;}
</style>


## Literatur
<style>
div.callout {border-left-color: #8cd000 !important;
</style>