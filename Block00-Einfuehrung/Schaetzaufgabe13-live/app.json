[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\n\ncustom_theme <- bs_theme(\n  font_scale = .8\n)\n\n# Define UI for application that draws a histogram\nui <- page_fixed(\n  theme = custom_theme, \n    card(\n      card_header(\"Erst- vs. Drittklässler\", class = \"bg-dark\"),\n      card_body(\n          card(shinycssloaders::withSpinner(\n               plotOutput(\"plot1\", \n                         width = \"300px\",\n                         height = \"300px\"\n                         ),\n               color = \"#8cd000\"),\n               textOutput(\"overlap\")\n               ),\n        layout_columns(\n          actionButton(\"smaller_plot1\",  icon(\"scale-balanced\")),\n          actionButton(\"larger_plot1\",  icon(\"scale-unbalanced\")))\n      ))\n)\n\n# Define server logic required to draw a histogram\ndistribution_normal <- function(n,\n            mean = 0,\n            sd = 1,\n            random = FALSE,\n            ...){\n    if (random) {\n      stats::rnorm(n, mean, sd)\n    }\n    else {\n      stats::qnorm(stats::ppoints(n), mean, sd, ...)\n    }\n  }\n\nserver <- function(input, output) {\n  \n  output$plot1 <- renderPlot({\n    Erstklässler=distribution_normal(300, 121, 7.9)     \n    Drittklässler=distribution_normal(300, 121, 7.9) +\n      max(1*input$larger_plot1 - 1*input$smaller_plot1, 0)\n    \n    # First distribution\n    par(mfrow = c(2,1), mar=c(2,1,1.5,1))\n    hist(Erstklässler, \n         breaks=30, \n         xlim=c(min(c(Erstklässler, Drittklässler)),max(c(Erstklässler, Drittklässler))), \n         ylab = \"\",\n         xlab = \"\",\n         col=rgb(1,0,0,0.5), \n         main=\"Erstklässler\" )\n    \n    # Second with add=T to plot on top\n    hist(Drittklässler, \n         breaks=30, \n         xlim=c(min(c(Erstklässler, Drittklässler)),max(c(Erstklässler, Drittklässler))), \n         ylab = \"\",\n         col=rgb(0,0,1,0.5),\n         main=\"Drittklässler\" )\n  })\n  \n  cohend <- reactive({\n    (mean(distribution_normal(300, 121, 7.9)) - \n       mean(distribution_normal(300, 121, 7.9) +\n              max(1*input$larger_plot1 - 1*input$smaller_plot1, 0)))/15\n  })\n  \n  output$overlap <- renderText({\n    paste0(\"Aktuelle Überlappung = \", round(2*pnorm(-abs(cohend())/2), 2)*100, \"%\")\n  })\n}   \n\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
